{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\rtsp-overlay-app\\\\frontend\\\\src\\\\components\\\\Player.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport Hls from 'hls.js';\nimport OverlayEditor from './OverlayEditor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Player({\n  hlsUrl\n}) {\n  _s();\n  const videoRef = useRef(null);\n  const [overlays, setOverlays] = useState([]);\n  useEffect(() => {\n    const v = videoRef.current;\n    if (!v) return;\n    if (Hls.isSupported()) {\n      const hls = new Hls();\n      hls.loadSource(hlsUrl);\n      hls.attachMedia(v);\n    } else if (v.canPlayType('application/vnd.apple.mpegurl')) {\n      v.src = hlsUrl;\n    }\n  }, [hlsUrl]);\n  useEffect(() => {\n    fetch('/api/overlays').then(r => r.json()).then(setOverlays).catch(() => setOverlays([]));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-container\",\n      style: {\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        controls: true,\n        style: {\n          width: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), overlays.map(o => {\n        var _videoRef$current, _videoRef$current2;\n        return /*#__PURE__*/_jsxDEV(Rnd, {\n          size: {\n            width: (_videoRef$current = videoRef.current) === null || _videoRef$current === void 0 ? void 0 : _videoRef$current.clientWidth,\n            height: (_videoRef$current2 = videoRef.current) === null || _videoRef$current2 === void 0 ? void 0 : _videoRef$current2.clientHeight\n          },\n          position: {\n            x: 0,\n            y: 0\n          },\n          enableResizing: false,\n          dragAxis: \"none\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: o.content,\n            onChange: e => saveItem(o._id, {\n              ...o,\n              content: e.target.value\n            }),\n            style: {\n              width: '100%',\n              height: '100%',\n              background: 'transparent',\n              color: 'white',\n              fontSize: '20px',\n              border: 'none',\n              resize: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 3\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 3\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OverlayEditor, {\n      overlays: overlays,\n      setOverlays: setOverlays\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(Player, \"GocPXkdBehe3zWc2iHHNActLUgc=\");\n_c = Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useRef","useEffect","useState","Hls","OverlayEditor","jsxDEV","_jsxDEV","Player","hlsUrl","_s","videoRef","overlays","setOverlays","v","current","isSupported","hls","loadSource","attachMedia","canPlayType","src","fetch","then","r","json","catch","className","children","style","position","ref","controls","width","fileName","_jsxFileName","lineNumber","columnNumber","map","o","_videoRef$current","_videoRef$current2","Rnd","size","clientWidth","height","clientHeight","x","y","enableResizing","dragAxis","value","content","onChange","e","saveItem","_id","target","background","color","fontSize","border","resize","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/rtsp-overlay-app/frontend/src/components/Player.js"],"sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\nimport Hls from 'hls.js'\nimport OverlayEditor from './OverlayEditor'\n\nexport default function Player({hlsUrl}){\n  const videoRef = useRef(null)\n  const [overlays, setOverlays] = useState([])\n\n  useEffect(()=>{\n    const v = videoRef.current\n    if (!v) return\n    if (Hls.isSupported()){\n      const hls = new Hls()\n      hls.loadSource(hlsUrl)\n      hls.attachMedia(v)\n    } else if (v.canPlayType('application/vnd.apple.mpegurl')){\n      v.src = hlsUrl\n    }\n  }, [hlsUrl])\n\n  useEffect(()=>{\n    fetch('/api/overlays')\n      .then(r=>r.json())\n      .then(setOverlays)\n      .catch(()=>setOverlays([]))\n  }, [])\n\n  return (\n    <div className=\"player-wrapper\">\n      <div className=\"video-container\" style={{position:'relative'}}>\n        <video ref={videoRef} controls style={{width: '100%'}} />\n        {overlays.map(o => (\n  <Rnd\n  size={{width: videoRef.current?.clientWidth, height: videoRef.current?.clientHeight}}\n  position={{x:0, y:0}}\n  enableResizing={false}\n  dragAxis=\"none\"\n>\n  <textarea\n    value={o.content}\n    onChange={(e) => saveItem(o._id, {...o, content: e.target.value})}\n    style={{\n      width: '100%',\n      height: '100%',\n      background: 'transparent',\n      color: 'white',\n      fontSize: '20px',\n      border: 'none',\n      resize: 'none'\n    }}\n  />\n</Rnd>\n\n))}\n\n\n      </div>\n      {/* Pass overlays state and setter to OverlayEditor */}\n      <OverlayEditor overlays={overlays} setOverlays={setOverlays} />\n    </div>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}